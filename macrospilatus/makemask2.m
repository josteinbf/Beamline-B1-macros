function mask=makemask2(mask,A,maxvalue)
%function mask=makemask2(mask,A,maxvalue)
%
%A more intuitive tool to create mask matrices
%
%Inputs:
%   mask: the mask matrix. 0 means masked, 1 means non-masked.
%   A: background image. Should be of the same size as mask.
%   maxvalue: elements of A larger than this will replaced by the largest
%       of the elements of A, which are smaller than this.
%
%Output:
%   the mask matrix
%
%Usage:
%   After the figure is plotted press the buttons accordingly. The tooltips
%   should help.
%
%Created: [29:30].6.2009 by Andras Wacha (awacha at gmail dot com)

% this is for callback mechanism.
if ischar(mask)
    handles=get(gcf,'UserData');
    mask=[mask,'(handles)'];
    eval(mask);
    return
end

%normal calling style begins here.
if nargin>2
    A(A>=maxvalue)=max(max(A(A<=maxvalue)));
end
A(A<=0)=min(min(A(A>0))); % remove zeroes. After this it is safe to take log(A)

% these are icon bitmaps. Skip these...
rectangleicon=[  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
  1  1    0    0    0    0    0    0    0    0    0    0  1  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1    0  1  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1    0  1  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1    0  1  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1    0  1  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1    0  1  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1    0  1  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1    0  1  1  1  1;...
  1  1    0    0    0    0    0    0    0    0    0    0  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1];
rectangleicon(:,:,2)=rectangleicon(:,:,1);
rectangleicon(:,:,3)=rectangleicon(:,:,1);

triangleicon=[1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
              1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
              1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
              1  1  1  1  1  1  1  1  1  1  1  0  0  1  1  1;...
              1  1  1  1  1  1  1  1  1  0  0  1  0  1  1  1;...
              1  1  1  1  1  1  1  0  0  1  1  0  0  1  1  1;...
              1  1  1  1  1  0  0  1  1  1  1  0  1  1  1  1;...
              1  1  1  0  0  1  1  1  1  1  1  0  1  1  1  1;...
              1  1  0  1  1  1  1  1  1  1  0  1  1  1  1  1;...
              1  1  1  0  1  1  1  1  1  1  0  1  1  1  1  1;...
              1  1  1  1  0  1  1  1  1  0  1  1  1  1  1  1;...
              1  1  1  1  1  0  1  1  1  0  1  1  1  1  1  1;...
              1  1  1  1  1  1  0  1  0  0  1  1  1  1  1  1;...
              1  1  1  1  1  1  1  0  0  1  1  1  1  1  1  1;...
              1  1  1  1  1  1  1  1  0  1  1  1  1  1  1  1;...
              1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1];
triangleicon(:,:,2)=triangleicon(:,:,1);
triangleicon(:,:,3)=triangleicon(:,:,1);

circleicon=[1  1  1  1  1    0    0    0    0    0    0  1  1  1  1  1;...
  1  1  1  1    0  1  1  1  1  1  1    0  1  1  1  1;...
  1  1    0    0  1  1  1  1  1  1  1  1    0    0  1  1;...
  1  1    0  1  1  1  1  1  1  1  1  1  1    0  1  1;...
  1    0  1  1  1  1  1  1  1  1  1  1  1  1    0  1;...
    0  1  1  1  1  1  1  1  1  1  1  1  1  1  1    0;...
    0  1  1  1  1  1  1  1  1  1  1  1  1  1  1    0;...
    0  1  1  1  1  1  1    0    0  1  1  1  1  1  1    0;...
    0  1  1  1  1  1  1    0    0  1  1  1  1  1  1    0;...
    0  1  1  1  1  1  1  1  1  1  1  1  1  1  1    0;...
    0  1  1  1  1  1  1  1  1  1  1  1  1  1  1    0;...
  1    0  1  1  1  1  1  1  1  1  1  1  1  1    0  1;...
  1  1    0  1  1  1  1  1  1  1  1  1  1    0  1  1;...
  1  1    0    0  1  1  1  1  1  1  1  1    0    0  1  1;...
  1  1  1  1    0  1  1  1  1  1  1    0  1  1  1  1;...
  1  1  1  1  1    0    0    0    0    0    0  1  1  1  1  1];
circleicon(:,:,2)=circleicon(:,:,1);
circleicon(:,:,3)=circleicon(:,:,1);

maskicon=[ 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
  1  1    0    0  1  1  1  1  1  1    0    0    0  1  1  1;...
  1  1    0  1    0  1  1  1  1  1    0  1    0  1  1  1;...
  1  1    0  1    0    0    0    0    0    0  1  1    0  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1  1    0  1  1  1;...
  1  1    0  1    0    0  1  1  1    0    0  1    0  1  1  1;...
  1  1    0  1    0    0  1  1  1    0    0  1    0  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1  1    0  1  1  1;...
  1  1    0  1  1  1  1  1  1  1  1  1    0  1  1  1;...
  1  1    0  1  1    0  1  1  1    0  1  1    0  1  1  1;...
  1  1  1    0  1    0    0    0    0    0  1    0    0  1  1  1;...
  1  1  1  1    0  1  1  1  1  1  1    0  1  1  1  1;...
  1  1  1  1  1    0  1  1  1  1  1    0  1  1  1  1;...
  1  1  1  1  1  1    0    0    0    0    0    0  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1];
maskicon(:,:,2)=maskicon(:,:,1);
maskicon(:,:,3)=maskicon(:,:,1);

unmaskicon=[   0  1  1  1  1  1  1  1  1  1  1  1  1  1  1    0;...
    0    0  1  1  1  1  1  1  1  1  1  1  1  1    0    0;...
  1    0    0    0  1  1  1  1  1  1    0    0    0    0    0  1;...
  1  1    0    0    0  1  1  1  1  1    0  1    0    0  1  1;...
  1  1    0    0    0    0    0    0    0    0  1    0    0  1  1  1;...
  1  1    0  1    0    0  1  1  1  1    0    0    0  1  1  1;...
  1  1    0  1    0    0    0  1  1    0    0  1    0  1  1  1;...
  1  1    0  1    0    0    0    0    0    0    0  1    0  1  1  1;...
  1  1    0  1  1  1  1    0    0  1  1  1    0  1  1  1;...
  1  1    0  1  1  1    0    0    0    0  1  1    0  1  1  1;...
  1  1    0  1  1    0    0  1  1    0    0  1    0  1  1  1;...
  1  1  1    0    0    0    0    0    0    0    0    0    0  1  1  1;...
  1  1  1    0    0  1  1  1  1  1  1    0    0  1  1  1;...
  1  1    0    0  1    0  1  1  1  1  1    0    0    0  1  1;...
    0    0    0  1  1  1    0    0    0    0    0    0  1    0    0  1;...
    0    0  1  1  1  1  1  1  1  1  1  1  1  1    0    0];
unmaskicon(:,:,2)=unmaskicon(:,:,1);
unmaskicon(:,:,3)=unmaskicon(:,:,1);

flipmaskicon=[   1     1     1     1     1     1     1     1     1     1     1     1     1     1     1     0;...
     1     1     1     1     1     1     1     1     1     1     1     1     1     1     0     0;...
     1     1     0     0     1     1     1     1     1     1     0     0     0     0     0     0;...
     1     1     0     1     0     1     1     1     1     1     0     1     1     0     0     0;...
     1     1     0     1     0     0     0     0     0     0     1     0     1     0     0     0;...
     1     1     0     1     1     1     1     1     1     1     0     0     1     0     0     0;...
     1     1     0     1     0     0     1     1     1     1     1     0     1     0     0     0;...
     1     1     0     1     0     0     1     1     0     1     1     0     1     0     0     0;...
     1     1     0     1     1     1     1     0     0     0     0     0     1     0     0     0;...
     1     1     0     1     1     1     0     0     0     0     0     0     1     0     0     0;...
     1     1     0     1     1     1     0     0     0     1     0     0     1     0     0     0;...
     1     1     1     0     0     1     1     1     1     1     0     1     1     0     0     0;...
     1     1     1     0     1     0     0     0     0     0     0     1     0     0     0     0;...
     1     1     0     0     0     1     0     0     0     0     0     1     0     0     0     0;...
     1     0     0     0     0     0     1     1     1     1     1     1     0     0     0     0;...
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0];
flipmaskicon(:,:,2)=flipmaskicon(:,:,1);
flipmaskicon(:,:,3)=flipmaskicon(:,:,1);

doneicon=[ 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1    0    0;...
  1  1  1  1  1  1  1  1  1  1  1  1  1    0    0    0;...
  1  1  1  1  1  1  1  1  1  1  1  1    0    0    0  1;...
  1  1  1  1  1  1  1  1  1  1  1    0    0  1  1  1;...
  1  1  1  1  1  1  1  1  1  1    0    0  1  1  1  1;...
  1    0    0  1  1  1  1  1  1    0    0  1  1  1  1  1;...
  1    0    0  1  1  1  1  1    0    0    0  1  1  1  1  1;...
  1    0    0    0  1  1  1  1    0    0  1  1  1  1  1  1;...
  1  1    0    0    0  1  1    0    0  1  1  1  1  1  1  1;...
  1  1  1    0    0  1    0    0    0  1  1  1  1  1  1  1;...
  1  1  1    0    0    0    0    0  1  1  1  1  1  1  1  1;...
  1  1  1  1    0    0    0  1  1  1  1  1  1  1  1  1;...
  1  1  1  1  1    0  1  1  1  1  1  1  1  1  1  1;...
  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1];
doneicon(:,:,2)=doneicon(:,:,1);
doneicon(:,:,3)=doneicon(:,:,1);

invertmaskicon=ones(16,16);
[x,y]=meshgrid(1:16,1:16);
invertmaskicon(x+y>16)=0;
invertmaskicon(:,:,2)=invertmaskicon(:,:,1);
invertmaskicon(:,:,3)=invertmaskicon(:,:,1);
%end of icon bitmaps.

% here we build the toolbar.

handles=struct();
handles.toolbar=uitoolbar();
handles.rectangletool=uipushtool(handles.toolbar,'CData',rectangleicon,'TooltipString','Select rectangle','ClickedCallback','makemask2(''selectrectangle'');');
handles.triangletool=uipushtool(handles.toolbar,'CData',triangleicon,'TooltipString','Select triangle','ClickedCallback','makemask2(''selecttriangle'');');
handles.circletool=uipushtool(handles.toolbar,'CData',circleicon,'TooltipString','Select circle','ClickedCallback','makemask2(''selectcircle'');');
handles.inverttool=uipushtool(handles.toolbar,'CData',invertmaskicon,'TooltipString','Invert mask','Separator','on','ClickedCallback','makemask2(''invertmask'');');
handles.masktool=uipushtool(handles.toolbar,'CData',maskicon,'TooltipString','Mask area','Separator','on','ClickedCallback','makemask2(''maskit'');');
handles.unmasktool=uipushtool(handles.toolbar,'CData',unmaskicon,'TooltipString','Unmask area','ClickedCallback','makemask2(''unmaskit'');');
handles.flipmasktool=uipushtool(handles.toolbar,'CData',flipmaskicon,'TooltipString','Flip mask on area','ClickedCallback','makemask2(''flipmask'');');
handles.donetool=uipushtool(handles.toolbar,'CData',doneicon,'TooltipString','Done','Separator','on','UserData',0,'ClickedCallback','makemask2(''doneclicked'');');
handles.redrawneeded=1; % this signals if redraw is needed in the main loop
handles.mask=mask; %the mask
handles.pointstomask=[]; %the currently selected pixels
handles.done=0;
set(gcf,'UserData',handles); %"handles" is stored as the UserData field of the current figure

% the main loop. It ends when the UserDat
while handles.done==0
    if handles.redrawneeded % if redraw is needed
        hold off;
        imagesc(log(A));
        % plot the mask semitransparently
        maskwhite=ones(size(A,1),size(A,2),3);
        hold on;
        h=imagesc(maskwhite);
        set(h,'AlphaData',(handles.mask==0)*0.7);
        handles.redrawneeded=0; % redraw is not needed.
        set(gcf,'UserData',handles); %update handles
    end
    uiwait % wait for user interaction (pressing toolbar buttons). Execution
           % returns here when uiresume is called (at the end of each callback
           % function)
    %fetch the possibly updated version of handles.
    handles=get(gcf,'UserData');
end
% we reach this point when handles.done becomes nonzero.
delete(handles.toolbar); %remove toolbar from figure
set(gcf,'UserData',[]); %remove our data
mask=handles.mask;
return %this is not needed, only for clarity

% here come the callback routines.
function doneclicked(handles) % this is called when the done button is clicked.
    handles.done=1;
    set(gcf,'UserData',handles);
    uiresume
    
function selectrectangle(handles)
    title('Select two opposite corners of the rectangle!')
    [gx,gy,gb]=ginput(2); % two mouse clicks
    % find the real corners of the rectangle
    x0=max([floor(min(gx)) 1]);
    y0=max([floor(min(gy)) 1]);
    x1=min([ceil(max(gx)) size(handles.mask,2)]);
    y1=min([ceil(max(gy)) size(handles.mask,1)]);
    %set selection
    handles.pointstomask=zeros(size(handles.mask));
    handles.pointstomask(y0:y1,x0:x1)=1;
    h=line([x0 x1 x1 x0 x0],[y0 y0 y1 y1 y0]); % draw rectangle
    set(h,'Color','white');
    title('Now mask/unmask/flip it if you want.');
    set(gcf,'UserData',handles); % update handles structure.
    uiresume % return from uiwait in main loop.

function selecttriangle(handles) %select a triangle
    title('Select three corners of the triangle!')
    [gx(1),gy(1)]=ginput(1); % corner C
    [gx(2),gy(2)]=ginput(1); % corner A
    h=line(gx,gy); set(h,'Color','white');
    [gx(3),gy(3)]=ginput(1); % corner B
    h=line(gx(2:3),gy(2:3)); set(h,'Color','white');
    h=line(gx([3 1]),gy([3 1])); set(h,'Color','white');
    %
    % The triangle:
    % 
    %        B
    %        .
    %        ..
    %       .  ..
    %       .    .. c
    %       .      ..
    %    a .         ..
    %      .          .. A
    %      .      ....
    %     .   ....
    %     ....   b
    %    C(x0,y0)
    x0=gx(1); y0=gy(1); v1x=gx(2)-gx(1); v1y=gy(2)-gy(1); v2x=gx(3)-gx(1); v2y=gy(3)-gy(1);
    % now we express every point of the matrix with the v1 and v2 vectors (sides a and b of the triangle),
    % with respect to the origin x0,y0 (corner C)
    [X,Y]=meshgrid(1:size(handles.mask,2),1:size(handles.mask,1));
    X=X-x0; % x coordinate for each pixel (column)
    Y=Y-y0; % y coordinate for each pixel (row)
    i1=v2y/(v1x*v2y-v2x*v1y); % the 1st component of the unit vector i. (with respect to v1)
    i2=-v1y/(v1x*v2y-v2x*v1y); % the 2nd component of the unit vector i. (with respect to v2)
    j1=v2x/(v2x*v1y-v1x*v2y); % the same as above, but for j.
    j2=-v1x/(v2x*v1y-v1x*v2y);
    A1=X*i1+Y*j1; % the coefficients for v1 for each point.
    A2=X*i2+Y*j2; % the coefficients for v2 for each point.
    
    title('Now mask/unmask/flip it if you want.')
    handles.pointstomask=zeros(size(handles.mask));
    % select pixels if both A1 and A2 is greater than 0 (the pixel lies
    % between v1 and v2) and (A1+A2)<1 (the pixel is not over side c)
    handles.pointstomask((A1>0) &(A2>0) & (A1+A2<1))=1;
    set(gcf,'UserData',handles);
    uiresume
    
    
function selectcircle(handles)
    title('Select circle center with left button')
    [gx,gy]=ginput(1); %origin
    title('Select circle radius with right button')
    [rx,ry]=ginput(1);
    radius=sqrt((rx-gx)^2+(ry-gy)^2);
    x=cos((0:0.01:2)*pi)*radius+gx; % x values for circle points
    y=sin((0:0.01:2)*pi)*radius+gy; % y values for circle points
    plot(x,y,'w-','LineWidth',1); % draw a circle
    title('Now mask/unmask/flip it if you want.')
    [C,R]=meshgrid(1:size(handles.mask,2),1:size(handles.mask,1));
    D=sqrt((C-gx).^2+(R-gy).^2); % distance of pixels from the origin
    handles.pointstomask=(D<radius); %do selection
    set(gcf,'UserData',handles);
    uiresume

function maskit(handles) % mask selected points
    if ~isempty(handles.pointstomask)
        handles.mask=handles.mask & ~handles.pointstomask;
        handles.pointstomask=[];
        handles.redrawneeded=1;
    else
        title('Select something first!');
    end
    set(gcf,'UserData',handles);
    uiresume
    
function unmaskit(handles) %unmask selected points
    if ~isempty(handles.pointstomask)
        handles.mask=handles.mask | handles.pointstomask;
        handles.pointstomask=[];
        handles.redrawneeded=1;
    else
        title('Select something first!');
    end
    set(gcf,'UserData',handles);
    uiresume
    
function flipmask(handles) %flip masked state of selected points
    if ~isempty(handles.pointstomask)
        handles.mask=xor(handles.mask,handles.pointstomask);
        handles.pointstomask=[];
        handles.redrawneeded=1;
    else
        title('Select something first!');
    end
    set(gcf,'UserData',handles);
    uiresume

function invertmask(handles) % invert the whole mask
    handles.mask=(handles.mask==0);
    handles.redrawneeded=1;
    set(gcf,'UserData',handles);
    uiresume;
    